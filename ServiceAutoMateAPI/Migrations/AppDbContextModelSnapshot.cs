// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceAutoMateAPI.Data;

#nullable disable

namespace ServiceAutoMateAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceAutoMateAPI.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NomeEmpresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PorcentagemCobranca")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorMaximoNota")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.DadosNotaFiscal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NumeroNota")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SolicitacaoServicoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorNota")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("SolicitacaoServicoId");

                    b.ToTable("NotasFiscais");
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.FretePorCidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("FretesPorCidade");
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.SolicitacaoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CidadeDestinatario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destinatario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuantidadeVolumes")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorFrete")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Solicitacoes");
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.DadosNotaFiscal", b =>
                {
                    b.HasOne("ServiceAutoMateAPI.Models.SolicitacaoServico", null)
                        .WithMany("NotasFiscais")
                        .HasForeignKey("SolicitacaoServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.FretePorCidade", b =>
                {
                    b.HasOne("ServiceAutoMateAPI.Models.Cliente", null)
                        .WithMany("FretesPorCidade")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.Cliente", b =>
                {
                    b.Navigation("FretesPorCidade");
                });

            modelBuilder.Entity("ServiceAutoMateAPI.Models.SolicitacaoServico", b =>
                {
                    b.Navigation("NotasFiscais");
                });
#pragma warning restore 612, 618
        }
    }
}
